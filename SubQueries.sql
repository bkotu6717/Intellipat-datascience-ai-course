CREATE DATABASE May28Session
use May28Session

CREATE TABLE LOCATION(
    id INTEGER PRIMARY KEY,
    city VARCHAR(30)
)

insert into [LOCATION] VALUES
(122, 'NewYork'),
(123, 'Dallas'),
(124, 'Chicago'),
(167, 'Boston')

SELECT * from [LOCATION];


CREATE TABLE department(
    id INTEGER PRIMARY KEY,
    name VARCHAR(100),
    location_id INTEGER REFERENCES LOCATION(id)
)


INSERT INTO department VALUES
(10, 'Accounting', 122),
(20, 'Sales', 123),
(30, 'Research', 124),
(40, 'Operations', 167)

select * from department;

CREATE TABLE job(
    id INTEGER PRIMARY KEY,
    designation VARCHAR(100)
)

insert into job VALUES
(667,'Clerk'),
(668,'Staff'),
(669,'Analyst'),
(670,'SalesPerson'),
(671,'Manager'),
(672,'Specialist');

SELECT * FROM job;

drop table employee;
CREATE TABLE EMPLOYEE(
    EMPLOYEE_ID INT, LAST_NAME VARCHAR(50), 
    FIRST_NAME VARCHAR(50), 
    MIDDLE_NAME VARCHAR(50),
    EMPJOB_ID INT FOREIGN KEY REFERENCES JOB(id), 
    MANAGER_ID INT, 
    HIRE_DATE DATE, 
    SALARY INT, 
    COMM INT,
    EMP_LOCATION_ID INTEGER FOREIGN KEY REFERENCES LOCATION(id),
    EMP_DEPARTMENT_ID INT FOREIGN KEY REFERENCES DEPARTMENT(id)
)

INSERT INTO EMPLOYEE VALUES
(7369, 'SMITH','JOHN','Q',667,NULL,'17-DEC-84',800,NULL,122,20),
(7499, 'ALLEN','KEVIN','J',670,7369,'20-FEB-85',1600,300,123,30),
(7505, 'DOYLE','JEAN','K',671,7499,'4-APR-85',2850,NULL,124,30),
(7506, 'DENNIS','LYNN','S',671,7505,'15-MAY-85',2750,NULL,167,30),
(7507, 'BAKER','LESLIE','D',671,7507,'10-JUN-85',2200,NULL,122,40),
(7521, 'WARK','CYNTHIA','D',670,7369,'22-FEB-85',1250,500,123,30);


-- SUB QUERIES
-- 1. DISPLAY THE EMPLOYEES LIST WHO GOT THE MAXIMUM SALARY.
    SELECT salary, FIRST_NAME AS EMP_NAME FROM EMPLOYEE WHERE salary = ( SELECT MAX(salary) FROM EMPLOYEE);
-- 2. DISPLAY THE EMPLOYEES WHO ARE WORKING IN SALES DEPARTMENT.
    SELECT * FROM EMPLOYEE WHERE EMP_DEPARTMENT_ID = (
        SELECT ID FROM department WHERE department.id = 20
    )
-- 3. DISPLAY THE EMPLOYEES WHO ARE WORKING AS 'CLERCK'.
    SELECT * FROM job;
    SELECT * FROM EMPLOYEE;
    SELECT * FROM EMPLOYEE WHERE EMPJOB_ID = (SELECT ID FROM job WHERE id = 667)
-- 4. DISPLAY THE LIST OF EMPLOYEES WHO ARE LIVING IN "NEW YORK".
    SELECT * FROM EMPLOYEE WHERE EMPJOB_ID = (
        SELECT E.EMPJOB_ID FROM EMPLOYEE E
        INNER JOIN job J ON J.id = E.EMPJOB_ID
        INNER JOIN department D ON E.EMP_DEPARTMENT_ID = D.id
        INNER JOIN [LOCATION] ON [LOCATION].id = D.location_id
        WHERE [LOCATION].city = 'DALLAS'
    )
    SELECT * FROM department;
    SELECT * FROM [LOCATION];
    SELECT * FROM EMPLOYEE;


-- 5. FIND OUT NO. OF EMPLOYEES WORKING IN "SALES" DEPARTMENT.
    SELECT COUNT(*) AS [SALES EMPLOYEES] FROM EMPLOYEE WHERE EMP_DEPARTMENT_ID = (
        SELECT ID FROM department WHERE department.id = 20
    )
-- 6. UPDATE THE EMPLOYEES SALARIES, WHO ARE WORKING AS CLERK ON THE BASIS OF 10%.
    UPDATE EMPLOYEE SET SALARY = ((SALARY) + (SALARY * 0.1)) WHERE EMPJOB_ID = (
        SELECT E.EMPJOB_ID FROM EMPLOYEE E WHERE E.EMPJOB_ID = 667
    )
-- 7. DELETE THE EMPLOYEES WHO ARE WORKING IN ACCOUNTING DEPARTMENT.
    DELETE FROM EMPLOYEE WHERE EMP_DEPARTMENT_ID = (
        SELECT E.EMP_DEPARTMENT_ID FROM EMPLOYEE E WHERE E.EMP_DEPARTMENT_ID = 10
    )

-- 8. DISPLAY THE SECOND HIGHEST SALARY DRAWING EMPLOYEE DETAILS.
    WITH EMP_SAL_RANK AS (SELECT *, RANK() OVER (ORDER BY SALARY DESC) AS SAL_RANK FROM EMPLOYEE)
    SELECT * FROM EMP_SAL_RANK WHERE EMP_SAL_RANK.SAL_RANK= 2

-- 9. DISPLAY THE N'TH HIGHEST SALARY DRAWING EMPLOYEE DETAILS.
    WITH EMP_SAL_RANK AS (SELECT *, RANK() OVER (ORDER BY SALARY DESC) AS SAL_RANK FROM EMPLOYEE)
    SELECT * FROM EMP_SAL_RANK WHERE EMP_SAL_RANK.SAL_RANK= 4
-- 10. LIST OUT THE EMPLOYEES WHO EARN MORE THAN EVERY EMPLOYEE IN DEPARTMENT 30.
    SELECT * FROM EMPLOYEE WHERE SALARY > (
        SELECT MAX(SALARY) FROM EMPLOYEE E WHERE E.EMP_DEPARTMENT_ID = 30
    )
-- 11. LIST OUT THE EMPLOYEES WHO EARN MORE THAN THE LOWEST SALARY IN DEPARTMENT 30.
   SELECT * FROM EMPLOYEE WHERE SALARY > (
        SELECT MIN(SALARY) FROM EMPLOYEE E WHERE E.EMP_DEPARTMENT_ID = 30
    )
-- 12. FIND OUT WHOSE DEPARTMENT HAS NOT EMPLOYEES.
    SELECT * FROM department D WHERE D.id NOT IN (SELECT E.EMP_DEPARTMENT_ID FROM EMPLOYEE E)
-- 13. FIND OUT WHICH DEPARTMENT DOES NOT HAVE ANY EMPLOYEES.
    SELECT * FROM department D WHERE D.id NOT IN (SELECT E.EMP_DEPARTMENT_ID FROM EMPLOYEE E)

-- 14. FIND OUT THE EMPLOYEES WHO EARN GREATER THAN THE AVERAGE SALARY FOR THEIR DEPARTMENT.
    
-- METHOD #1
    SELECT E.FIRST_NAME, E.SALARY, E.EMP_DEPARTMENT_ID FROM EMPLOYEE E WHERE E.SALARY > (
        SELECT AVG(E2.SALARY) FROM EMPLOYEE E2 WHERE E.EMP_DEPARTMENT_ID = E2.EMP_DEPARTMENT_ID
    )
-- METHOD #2
    SELECT 
        E.FIRST_NAME, 
        E.SALARY, 
        E.EMP_DEPARTMENT_ID,
        TEMP.AVG_SALARY AS DEPT_AVG_SALARY
    FROM
        (
            SELECT 
                EMP_DEPARTMENT_ID, 
                AVG(SALARY) AS AVG_SALARY 
            FROM EMPLOYEE 
            GROUP BY EMP_DEPARTMENT_ID
        ) TEMP
    INNER JOIN EMPLOYEE E ON E.EMP_DEPARTMENT_ID = TEMP.EMP_DEPARTMENT_ID
    WHERE E.SALARY > TEMP.AVG_SALARY
