

CREATE DATABASE sql_assignment_6;
use sql_assignment_6

CREATE TABLE EMPLOYEE (
    EMPLOYEE_ID INTEGER PRIMARY KEY IDENTITY(1,1),
    FIRST_NAME VARCHAR(100),
    LAST_NAME VARCHAR(100),
    SALARY INTEGER,
    JOINING_DATE DATETIME,
    DEPARTMENT VARCHAR(100)
)

INSERT INTO EMPLOYEE VALUES ('Anika', 'Arora', 100000, '2022-02-14 9:00:00', 'HR')
INSERT INTO EMPLOYEE VALUES ('Veena', 'Verma', 80000, '2022-06-15 9:00:00', 'Admin')
INSERT INTO EMPLOYEE VALUES ('Vishal', 'Singhal', 300000, '2022-02-16 9:00:00', 'HR')
INSERT INTO EMPLOYEE VALUES ('Sushanth', 'Singh', 500000, '2022-02-17 9:00:00', 'Admin')
INSERT INTO EMPLOYEE VALUES ('Bhupal', 'Bhati', 500000, '2022-06-18 9:00:00', 'Admin')
INSERT INTO EMPLOYEE VALUES ('Dheeraj', 'Diwan', 200000, '2022-06-19 9:00:00', 'Account')
INSERT INTO EMPLOYEE VALUES ('Karan', 'Kumar', 75000, '2022-01-14 9:00:00', 'Account')
INSERT INTO EMPLOYEE VALUES ('Chandrika', 'Chauhan', 90000, '2022-04-15 9:00:00', 'Admin')

CREATE TABLE EMPLOYEE_BONUS (
    EMPLOYEE_ID INTEGER FOREIGN KEY REFERENCES EMPLOYEE(EMPLOYEE_ID),
    BONUS_AMOUNT INTEGER,
    BONUS_DATE DATETIME
)

INSERT INTO EMPLOYEE_BONUS VALUES(1, 5000, '2020-02-16')
INSERT INTO EMPLOYEE_BONUS VALUES(2, 3000, '2011-06-16')
INSERT INTO EMPLOYEE_BONUS VALUES(3, 4000, '2020-02-16')
INSERT INTO EMPLOYEE_BONUS VALUES(1, 4500, '2020-02-16')
INSERT INTO EMPLOYEE_BONUS VALUES(2, 3500, '2020-06-16')

CREATE TABLE EMPLOYEE_TITLE(
    EMPLOYEE_ID INTEGER FOREIGN KEY REFERENCES EMPLOYEE(EMPLOYEE_ID),
    EMPLOYEE_TITLE VARCHAR(100),
    AFFECTIVE_DATE DATETIME
)

INSERT INTO EMPLOYEE_TITLE VALUES(1, 'Manager', '2016-02-20');
INSERT INTO EMPLOYEE_TITLE VALUES(2, 'Executive', '2016-06-11');
INSERT INTO EMPLOYEE_TITLE VALUES(8, 'Executive', '2016-06-11');
INSERT INTO EMPLOYEE_TITLE VALUES(5, 'Manager', '2016-06-11');
INSERT INTO EMPLOYEE_TITLE VALUES(4, 'Asst. Manager', '2016-06-11');
INSERT INTO EMPLOYEE_TITLE VALUES(7, 'Executive', '2016-06-11');
INSERT INTO EMPLOYEE_TITLE VALUES(6, 'Lead', '2016-06-11');
INSERT INTO EMPLOYEE_TITLE VALUES(3, 'Lead', '2016-06-11');

-- Tasks To Be Performed:
-- 1 Display the “FIRST_NAME” from Employee table using the alias name as Employee_name.
    SELECT FIRST_NAME AS Employee_name FROM EMPLOYEE;

-- 2 Display “LAST_NAME” from Employee table in upper case.
    SELECT UPPER(LAST_NAME) FROM EMPLOYEE;

-- 3 Display unique values of DEPARTMENT from EMPLOYEE table.
    SELECT DISTINCT(DEPARTMENT) FROM EMPLOYEE;

-- 4 Display the first three characters of LAST_NAME from EMPLOYEE table.
    SELECT SUBSTRING(LAST_NAME, 1,3) FROM EMPLOYEE;

-- 5 Display the unique values of DEPARTMENT from EMPLOYEE table and prints its length.
    SELECT DISTINCT(DEPARTMENT), LEN(DEPARTMENT) FROM EMPLOYEE;

-- 6 Display the FIRST_NAME and LAST_NAME from EMPLOYEE table into a single column AS FULL_NAME. a space char should separate them.
    SELECT CONCAT(FIRST_NAME, ' ', LAST_NAME) AS FULL_NAME FROM EMPLOYEE;

-- 7 DISPLAY all EMPLOYEE details from the employee table order by FIRST_NAME Ascending.
    SELECT * FROM EMPLOYEE ORDER BY FIRST_NAME;

-- 8. Display all EMPLOYEE details order by FIRST_NAME Ascending and DEPARTMENT Descending.
    SELECT * FROM EMPLOYEE ORDER BY FIRST_NAME ASC, DEPARTMENT DESC;

-- 9 Display details for EMPLOYEE with the first name as “VEENA” and “KARAN” from EMPLOYEE table.
    SELECT * FROM EMPLOYEE WHERE FIRST_NAME IN ('VEENA', 'KARAN');

-- 10 Display details of EMPLOYEE with DEPARTMENT name as “Admin”.
    SELECT * FROM EMPLOYEE WHERE DEPARTMENT = 'ADMIN'

-- 11 DISPLAY details of the EMPLOYEES whose FIRST_NAME contains ‘V’.
    SELECT * FROM EMPLOYEE WHERE FIRST_NAME LIKE '%V%'

-- 12 DISPLAY details of the EMPLOYEES whose SALARY lies between 100000 and 500000.
    SELECT * FROM EMPLOYEE WHERE SALARY BETWEEN 100000 AND 500000;

-- 13 Display details of the employees who have joined in Feb-2020.
    SELECT * FROM EMPLOYEE WHERE MONTH(JOINING_DATE) = 2 AND YEAR(JOINING_DATE) = 2020

-- 14 Display employee names with salaries >= 50000 and <= 100000.
    SELECT * FROM EMPLOYEE WHERE SALARY BETWEEN 50000 AND 100000

-- 15 Display the number of Employees for each department in the descenting order.
    SELECT DEPARTMENT, COUNT(*) AS [EMPLOYEES COUNT] FROM EMPLOYEE GROUP BY DEPARTMENT ORDER BY [EMPLOYEES COUNT] DESC

-- 16 DISPLAY details of the EMPLOYEES who are also Managers.
    SELECT EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME, EMPLOYEE_TITLE.EMPLOYEE_TITLE  FROM EMPLOYEE 
    INNER JOIN EMPLOYEE_TITLE ON EMPLOYEE_TITLE.EMPLOYEE_ID = EMPLOYEE.EMPLOYEE_ID
    WHERE EMPLOYEE_TITLE.EMPLOYEE_TITLE = 'Manager'

-- 17 DISPLAY duplicate records having matching data in some fields of a table.
    SELECT * FROM
    (SELECT DEPARTMENT, COUNT(*) AS NUMBER_OF_DUPLICATES FROM EMPLOYEE 
    GROUP BY DEPARTMENT
    HAVING(COUNT(*)) > 1) AS TEMP INNER JOIN EMPLOYEE ON TEMP.DEPARTMENT = EMPLOYEE.DEPARTMENT

-- 18 Display only odd rows from a table.
    SELECT * FROM (
        SELECT ROW_NUMBER() OVER (ORDER BY EMPLOYEE_ID ASC) AS RN, FIRST_NAME, LAST_NAME FROM EMPLOYEE
    ) TEMP
    WHERE RN%2 = 1

-- 19 Clone a new table from EMPLOYEE table.
    SELECT * INTO EMPLOYEE_CLONE FROM EMPLOYEE;

-- 20 DISPLAY the TOP 2 highest salary from a table.
    SELECT TOP 2 SALARY, RANK() OVER (ORDER BY SALARY DESC) AS rank_no FROM (SELECT DISTINCT SALARY FROM EMPLOYEE) TEMP;

-- 21. DISPLAY the list of employees with the same salary.
    SELECT STRING_AGG(E.FIRST_NAME, ', ') EMP_LIST, E.SALARY FROM EMPLOYEE E
    WHERE E.SALARY IN (SELECT DISTINCT SALARY FROM EMPLOYEE)
    GROUP BY E.SALARY

-- 22 Display the second highest salary from a table.
    DECLARE @nthHighest int
    SET @nthHighest = 2
    SELECT TOP 1 Salary FROM
    (
    SELECT DISTINCT TOP (@nthHighest) SALARY as Salary FROM EMPLOYEE order by SALARY desc
    ) as result
    order by Salary;

-- 23 Display the first 50% records from a table.
    SELECT TOP 50 PERCENT * FROM EMPLOYEE;

-- 24. Display the departments that have less than 4 people in it.
    SELECT DEPARTMENT, COUNT(*) AS NO_OF_PEOPLE FROM EMPLOYEE
    GROUP BY DEPARTMENT
    HAVING COUNT(*) < 4

-- 25. Display all departments along with the number of people in there.
    SELECT DEPARTMENT, COUNT(*) AS NO_OF_PEOPLE FROM EMPLOYEE
    GROUP BY DEPARTMENT

-- 26 Display the name of employees having the highest salary in each department.
    WITH CTE AS
    (SELECT DEPARTMENT, MAX(SALARY) AS MAX_SALARY FROM EMPLOYEE
    GROUP BY DEPARTMENT)
    SELECT CONCAT(EMPLOYEE.FIRST_NAME, ' ', EMPLOYEE.LAST_NAME) AS EMP_NAME, EMPLOYEE.SALARY FROM CTE 
    INNER JOIN EMPLOYEE ON EMPLOYEE.DEPARTMENT = CTE.DEPARTMENT
    WHERE EMPLOYEE.SALARY = CTE.MAX_SALARY;

-- 27 Display the names of employees who earn the highest salary.
    SELECT CONCAT(FIRST_NAME, ' ', LAST_NAME) AS [Highest Salary EMPS] FROM EMPLOYEE WHERE SALARY = (SELECT MAX(SALARY) FROM EMPLOYEE)

-- 28 Diplay the average salaries for each department
    SELECT DEPARTMENT, AVG(SALARY) AS DEPT_AVG_SALARY FROM EMPLOYEE
    GROUP BY DEPARTMENT

-- 29 display the name of the employee who has got maximum bonus
    SELECT CONCAT(E.FIRST_NAME, ' ', E.LAST_NAME) AS MAX_BONUS_EMP FROM EMPLOYEE E
    INNER JOIN EMPLOYEE_BONUS EB ON E.EMPLOYEE_ID = EB.EMPLOYEE_ID
    WHERE EB.BONUS_AMOUNT = (SELECT MAX(BONUS_AMOUNT) FROM EMPLOYEE_BONUS);

-- 30 Display the first name and title of all the employees 
    SELECT E.FIRST_NAME, ET.EMPLOYEE_TITLE FROM EMPLOYEE E
    INNER JOIN EMPLOYEE_TITLE ET ON E.EMPLOYEE_ID = ET.EMPLOYEE_ID
